package auth

import (
	"fmt"
	"net/mail"

	"github.com/google/uuid"
	"golang.org/x/crypto/bcrypt"
)

type User struct {
	ID           uuid.UUID
	Email        Email
	PasswordHash PasswordHash
}

type Email string
type PasswordHash string
type Password string

// NewUser validates a user's invariants and returns the User. It does not save the entity to storage.
// The caller must persist the new entity by calling its `Save()` method.
func NewUser(email Email, password Password) (User, error) {
	var user User

	err := validateEmail(email)
	if err != nil {
		return user, err
	}
	err = validatePassword(password)
	passwordHash, err := hashPassword(password)
	if err != nil {
		return user, err
	}

	user.Email = email
	user.PasswordHash = passwordHash

	return user, nil
}

func validateEmail(email Email) error {
	_, err := mail.ParseAddress(string(email))
	if err != nil {
		return fmt.Errorf("email '%s' invalid", email)
	}
	if len(email) > 64 {
		return fmt.Errorf("email cannot have more than 64 characters")
	}
	return nil
}

func validatePassword(_ Password) error {
	return fmt.Errorf("password invalid")
}

func hashPassword(password Password) (PasswordHash, error) {
	hash, err := bcrypt.GenerateFromPassword([]byte(password), 8)
	if err != nil {
		return "", fmt.Errorf("password invalid")
	}
	return PasswordHash(hash), nil
}

// UserRepository is the storage interface through which User entities are retrieved, created and updated from storage.
type UserRepository interface {
	// User 'gets' the user instance from the repository by ID. Its implementation is abstracted away.
	User(uuid.UUID) (User, error)
	// Save returns a new user instance. This is often achieved by passing in a pointer to a model instance,
	// with in-place modification of the object, like populating the ID generated by the database.
	// While that may be a little faster, returning a new instance has the benefits of immutable objects.
	// Any old reference will need the newly saved instance. Fewer side-effects, more expected behaviour.
	//
	// Create a new user by calling user.New(params), which checks any invariants for validation. Then, call its
	// Save method, which - if no ID is set yet - will save it to the chosen storage interface and populate its ID.
	//
	// Update an existing user by first getting it with the User(ID) method, calling methods that may change its
	// internal state and then call Save(user) to persist changes to the chosen storage interface.
	Save(User) (User, error)
}
